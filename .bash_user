# -*- mode: sh -*-
EDITOR=emacs
GIT_EDITOR=vim

test -s ~/.alias && . ~/.alias || true
test -s ~/.bash_local && . ~/.~/.bash_local || true

ERL_TOP=$HOME/git/otp
EDEV_ROOT=$HOME/git/edev

# User specific environment and startup programs

export MAKEFLAGS=-j10
export JAVA_ARGS="-Dlog4j.configuration=file://$HOME/config/log4j.properties"
ulimit -c unlimited

# Prompt
source ~/.git-completion.sh
PS1='--[\u@\h] \[\e[0;34m\]\W/\[\e[0;32m\]$(__git_ps1 " (%s)") $CC_VIEW\[\e[0;34m\]\[\e[0m\]--\n> '
HTTP_PROXY=$http_proxy
EQC_VIEWER=xdg-open
LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
LESS=' -R -iMX '
JAVA_HOME=/usr/

PATH=$HOME/.cache/rebar3/bin:$HOME/apps/bin:$HOME/apps/erlang/bin:$HOME/bin:$PATH

if [ -f $HOME/.cargo/env ]; then
    source $HOME/.cargo/env
fi

if [ -f $HOME/.asdf/asdf.sh ]; then
    . $HOME/.asdf/asdf.sh
    . $HOME/.asdf/completions/asdf.bash
fi

export ERL_ZFLAGS="-kernel shell_history enabled"
export KERL_BUILD_DOCS=yes
export CFLAGS="-g3 -O2"
export ERLC_USE_SERVER=true

export LC_CTYPE=sv_SE.utf8

remove_path_duplicates () {
    PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"
}

mkemutags () {

    if [ "x$ERL_TOP" = "x" ]; then
        echo "\$ERL_TOP not set!" >&2
        return 1
    fi

    (cd $ERL_TOP/erts/ && find . -name '*.[hc]*' -print | grep -v "/test/" | gtags -f - )
    (cd $ERL_TOP/lib/erl_interface && find . -name '*.[hc]*' -print | grep -v "/test/" | gtags -f - )
    (cd $ERL_TOP/lib/ && find . -name '*.*rl' -print | grep -v "/test/" | xargs ctags -e )

}

mkemu () {
      (cd $ERL_TOP && make emulator USE_PGO=false TYPE=$*)
}

mktests () {
    (cd $ERL_TOP && ./otp_build tests)
}

mkerlenv () {
    if [ ! -f ./otp_build ]; then
        echo "Not a otp repo"
        return 1
    fi
    export ERL_TOP=`pwd`
    PATH=$ERL_TOP/bin:$PATH
    remove_path_duplicates
    mkemutags
    hash -r
    if [ -f ~/.emacs.d/tasks.json -a ! -f "$ERL_TOP/.vscode/tasks.json" ]; then
       ! mkdir "$ERL_TOP/.vscode"
       ln -s ~/.emacs.d/tasks.json "$ERL_TOP/.vscode/tasks.json"
    fi
    if [ -f ~/.emacs.d/erlang_ls.config -a ! -f $ERL_TOP/erlang_ls.config ]; then
       ln -s ~/.emacs.d/erlang_ls.config "$ERL_TOP/erlang_ls.config"
    fi
}

mkclean () {
    if [ "x$ERL_TOP" != "x$(pwd)" ]; then
        echo "You must be at \$ERL_TOP to execute this command!" >&2
        return 1
    fi
    git clean -xfdq
    mkerlenv
    return 0
}

mkcleansetup () {
     if mkclean; then
        ./otp_build setup $*
        if [ "$*" = "-t" ]; then
            BOOTSTRAP_ROOT=$ERL_TOP
            INSTALL_DATA="install -c -m 644"
            for app in xmerl common_test; do
                if test ! -d $BOOTSTRAP_ROOT/bootstrap/lib/$app; then
                    mkdir $BOOTSTRAP_ROOT/bootstrap/lib/$app
                fi
                if test ! -d $BOOTSTRAP_ROOT/bootstrap/lib/$app/include; then
                    mkdir $BOOTSTRAP_ROOT/bootstrap/lib/$app/include
                fi
                for x in lib/$app/include/*.hrl; do
	            BN=`basename $x`;
	            TF=$BOOTSTRAP_ROOT/bootstrap/lib/$app/include/$BN;
	            test -f  $TF &&
	                test '!' -z "`find $x -newer $TF -print`" &&
	                ${INSTALL_DATA} -p $x $TF
	            test '!' -f $TF &&
	                ${INSTALL_DATA} -p $x $TF
	            true
	        done
            done
            make common_test
        fi
     fi
}

export ERL_TOP PATH GIT_EDITOR EDITOR EDEV_ROOT HTTP_PROXY EQC_VIEWER LESSOPEN LESS JAVA_HOME
